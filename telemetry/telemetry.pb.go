// Code generated by protoc-gen-go.
// source: telemetry.proto
// DO NOT EDIT!

package telemetry

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type TelemetryDatumSchema_Type int32

const (
	TelemetryDatumSchema_BOOL      TelemetryDatumSchema_Type = 1
	TelemetryDatumSchema_DOUBLE    TelemetryDatumSchema_Type = 2
	TelemetryDatumSchema_INTERVAL  TelemetryDatumSchema_Type = 3
	TelemetryDatumSchema_INT64     TelemetryDatumSchema_Type = 4
	TelemetryDatumSchema_TIMESTAMP TelemetryDatumSchema_Type = 5
)

var TelemetryDatumSchema_Type_name = map[int32]string{
	1: "BOOL",
	2: "DOUBLE",
	3: "INTERVAL",
	4: "INT64",
	5: "TIMESTAMP",
}
var TelemetryDatumSchema_Type_value = map[string]int32{
	"BOOL":      1,
	"DOUBLE":    2,
	"INTERVAL":  3,
	"INT64":     4,
	"TIMESTAMP": 5,
}

func (x TelemetryDatumSchema_Type) Enum() *TelemetryDatumSchema_Type {
	p := new(TelemetryDatumSchema_Type)
	*p = x
	return p
}
func (x TelemetryDatumSchema_Type) String() string {
	return proto.EnumName(TelemetryDatumSchema_Type_name, int32(x))
}
func (x TelemetryDatumSchema_Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *TelemetryDatumSchema_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TelemetryDatumSchema_Type_value, data, "TelemetryDatumSchema_Type")
	if err != nil {
		return err
	}
	*x = TelemetryDatumSchema_Type(value)
	return nil
}

type TelemetryDatumSchema_Unit int32

const (
	TelemetryDatumSchema_KELVIN            TelemetryDatumSchema_Unit = 1
	TelemetryDatumSchema_VOLT              TelemetryDatumSchema_Unit = 2
	TelemetryDatumSchema_AMPERE            TelemetryDatumSchema_Unit = 3
	TelemetryDatumSchema_WATT              TelemetryDatumSchema_Unit = 4
	TelemetryDatumSchema_HERTZ             TelemetryDatumSchema_Unit = 5
	TelemetryDatumSchema_RADIAN_PER_SECOND TelemetryDatumSchema_Unit = 6
	TelemetryDatumSchema_SECOND            TelemetryDatumSchema_Unit = 7
)

var TelemetryDatumSchema_Unit_name = map[int32]string{
	1: "KELVIN",
	2: "VOLT",
	3: "AMPERE",
	4: "WATT",
	5: "HERTZ",
	6: "RADIAN_PER_SECOND",
	7: "SECOND",
}
var TelemetryDatumSchema_Unit_value = map[string]int32{
	"KELVIN":            1,
	"VOLT":              2,
	"AMPERE":            3,
	"WATT":              4,
	"HERTZ":             5,
	"RADIAN_PER_SECOND": 6,
	"SECOND":            7,
}

func (x TelemetryDatumSchema_Unit) Enum() *TelemetryDatumSchema_Unit {
	p := new(TelemetryDatumSchema_Unit)
	*p = x
	return p
}
func (x TelemetryDatumSchema_Unit) String() string {
	return proto.EnumName(TelemetryDatumSchema_Unit_name, int32(x))
}
func (x TelemetryDatumSchema_Unit) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *TelemetryDatumSchema_Unit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TelemetryDatumSchema_Unit_value, data, "TelemetryDatumSchema_Unit")
	if err != nil {
		return err
	}
	*x = TelemetryDatumSchema_Unit(value)
	return nil
}

type TextWithLang struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Lang             *string `protobuf:"bytes,2,opt,name=lang" json:"lang,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (this *TextWithLang) Reset()         { *this = TextWithLang{} }
func (this *TextWithLang) String() string { return proto.CompactTextString(this) }
func (*TextWithLang) ProtoMessage()       {}

func (this *TextWithLang) GetText() string {
	if this != nil && this.Text != nil {
		return *this.Text
	}
	return ""
}

func (this *TextWithLang) GetLang() string {
	if this != nil && this.Lang != nil {
		return *this.Lang
	}
	return ""
}

type TelemetryDatumSchema struct {
	Key              *string                    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	SourceKey        *string                    `protobuf:"bytes,7,opt,name=source_key" json:"source_key,omitempty"`
	Type             *TelemetryDatumSchema_Type `protobuf:"varint,2,opt,name=type,enum=telemetry.TelemetryDatumSchema_Type" json:"type,omitempty"`
	Unit             *TelemetryDatumSchema_Unit `protobuf:"varint,3,opt,name=unit,enum=telemetry.TelemetryDatumSchema_Unit" json:"unit,omitempty"`
	Name             []*TextWithLang            `protobuf:"bytes,4,rep,name=name" json:"name,omitempty"`
	Confidence       *float64                   `protobuf:"fixed64,5,opt,name=confidence" json:"confidence,omitempty"`
	DisplayGroup     *int32                     `protobuf:"varint,6,opt,name=display_group" json:"display_group,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (this *TelemetryDatumSchema) Reset()         { *this = TelemetryDatumSchema{} }
func (this *TelemetryDatumSchema) String() string { return proto.CompactTextString(this) }
func (*TelemetryDatumSchema) ProtoMessage()       {}

func (this *TelemetryDatumSchema) GetKey() string {
	if this != nil && this.Key != nil {
		return *this.Key
	}
	return ""
}

func (this *TelemetryDatumSchema) GetSourceKey() string {
	if this != nil && this.SourceKey != nil {
		return *this.SourceKey
	}
	return ""
}

func (this *TelemetryDatumSchema) GetType() TelemetryDatumSchema_Type {
	if this != nil && this.Type != nil {
		return *this.Type
	}
	return 0
}

func (this *TelemetryDatumSchema) GetUnit() TelemetryDatumSchema_Unit {
	if this != nil && this.Unit != nil {
		return *this.Unit
	}
	return 0
}

func (this *TelemetryDatumSchema) GetConfidence() float64 {
	if this != nil && this.Confidence != nil {
		return *this.Confidence
	}
	return 0
}

func (this *TelemetryDatumSchema) GetDisplayGroup() int32 {
	if this != nil && this.DisplayGroup != nil {
		return *this.DisplayGroup
	}
	return 0
}

type TelemetrySchema struct {
	Datum            []*TelemetryDatumSchema `protobuf:"bytes,1,rep,name=datum" json:"datum,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (this *TelemetrySchema) Reset()         { *this = TelemetrySchema{} }
func (this *TelemetrySchema) String() string { return proto.CompactTextString(this) }
func (*TelemetrySchema) ProtoMessage()       {}

type TelemetryDatum struct {
	Key              *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Timestamp        *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Boolean          *bool    `protobuf:"varint,3,opt,name=boolean" json:"boolean,omitempty"`
	Double           *float64 `protobuf:"fixed64,4,opt,name=double" json:"double,omitempty"`
	IntervalMin      *float64 `protobuf:"fixed64,5,opt,name=interval_min" json:"interval_min,omitempty"`
	IntervalMax      *float64 `protobuf:"fixed64,6,opt,name=interval_max" json:"interval_max,omitempty"`
	Int64            *int64   `protobuf:"varint,7,opt,name=int64" json:"int64,omitempty"`
	UnixTimestamp    *int64   `protobuf:"varint,8,opt,name=unix_timestamp" json:"unix_timestamp,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (this *TelemetryDatum) Reset()         { *this = TelemetryDatum{} }
func (this *TelemetryDatum) String() string { return proto.CompactTextString(this) }
func (*TelemetryDatum) ProtoMessage()       {}

func (this *TelemetryDatum) GetKey() string {
	if this != nil && this.Key != nil {
		return *this.Key
	}
	return ""
}

func (this *TelemetryDatum) GetTimestamp() int64 {
	if this != nil && this.Timestamp != nil {
		return *this.Timestamp
	}
	return 0
}

func (this *TelemetryDatum) GetBoolean() bool {
	if this != nil && this.Boolean != nil {
		return *this.Boolean
	}
	return false
}

func (this *TelemetryDatum) GetDouble() float64 {
	if this != nil && this.Double != nil {
		return *this.Double
	}
	return 0
}

func (this *TelemetryDatum) GetIntervalMin() float64 {
	if this != nil && this.IntervalMin != nil {
		return *this.IntervalMin
	}
	return 0
}

func (this *TelemetryDatum) GetIntervalMax() float64 {
	if this != nil && this.IntervalMax != nil {
		return *this.IntervalMax
	}
	return 0
}

func (this *TelemetryDatum) GetInt64() int64 {
	if this != nil && this.Int64 != nil {
		return *this.Int64
	}
	return 0
}

func (this *TelemetryDatum) GetUnixTimestamp() int64 {
	if this != nil && this.UnixTimestamp != nil {
		return *this.UnixTimestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("telemetry.TelemetryDatumSchema_Type", TelemetryDatumSchema_Type_name, TelemetryDatumSchema_Type_value)
	proto.RegisterEnum("telemetry.TelemetryDatumSchema_Unit", TelemetryDatumSchema_Unit_name, TelemetryDatumSchema_Unit_value)
}
